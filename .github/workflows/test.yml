# This is a basic workflow to help you get started with Actions

name: Manual Build Test for PRs

# Controls when the action will run. 
on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
  pull_request_target:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    env:
      # Setting the defaults up front
      LATEST_NODE: 10
      DEFAULT_IMAGE: nrchkb/node-red-homekit
      DEV_IMAGE: nrchkb/node-red-homekit-dev
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [ 10, 12, 14 ]
        suffix: [ "", "-minimal", "-raspbian" ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Show Env
        run: env
      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          flavor: |
            latest=false
            suffix=-${{matrix.node}}${{matrix.suffix}}
          images: |
            ${{ env.DEFAULT_IMAGE }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1
      - name: Get Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%dT%H:%M:%SZ')"
      - name: Get NRCHKB Version
        id: nrchkbVersion
        run: |
          HOMEKIT_BRIDGED_VERSION=$(grep -oE "\"node-red-contrib-homekit-bridged\": \"(\w*.\w*.\w*.\w*.\w*.)" package.json | cut -d\" -f4)
          echo "::set-output name=version::$HOMEKIT_BRIDGED_VERSION"
      - name: Set Node-RED Version
        id: nodeRedVersion
        run: |
          NODE_RED_VERSION=""
          if [[ "${{matrix.node}}" == "10" ]]; then
            NODE_RED_VERSION="1.3.5"
            sed -ie "s/\"node-red\":[^\"].*\"/\"node-red\": \"${NODE_RED_VERSION}\"/g" package.json
          else
            NODE_RED_VERSION=$(grep -oE "\"node-red\": \"(\w*.\w*.\w*.\w*.\w*.)" package.json | cut -d\" -f4)
          fi
          echo "::set-output name=version::$NODE_RED_VERSION"
      - name: Set Image Settings
        id: imageSettings
        run: |
          TAGS=""
          while IFS= read -r TAG;do
            if [ -z  "$TAGS" ]; then
              TAGS=$TAG
            else
              TAGS="$TAGS,$TAG"
            fi
          done <<< "${{ steps.meta.outputs.tags }}"

          TRAVIS_TAG=$(echo $GITHUB_REF | awk -F '/' '{ print $3}')
          if [[ "$TRAVIS_TAG" =~ ^v[0-9\.-]*$ ]]; then
            IMAGE=${{ env.DEFAULT_IMAGE }}
            PUSH="true"
            VERSION=${TRAVIS_TAG:1}
            if [ "${{ matrix.node }}" == "${{ env.LATEST_NODE }}" ] && [ "${{ matrix.suffix}}" == "" ]; then
              TAGS="$TAGS,$IMAGE:$VERSION,$IMAGE:latest"
            elif [ "${{ matrix.node }}" == "${{ env.LATEST_NODE }}" ] && [ "${{ matrix.suffix}}" == "-minimal" ]; then
              TAGS="$TAGS,$IMAGE:$VERSION,$IMAGE:latest-minimal"
            elif [ "${{ matrix.node }}" == "${{ env.LATEST_NODE }}" ] && [ "${{ matrix.suffix}}" == "-raspbian" ]; then
              TAGS="$TAGS,$IMAGE:$VERSION,$IMAGE:latest-raspbian"
            fi
            TAGS="$TAGS,$IMAGE:latest-${{ matrix.node }}"
            if [ "${{ matrix.suffix}}" != "" ]; then
              TAGS="$TAGS,$IMAGE:latest-${{ matrix.node }}${{ matrix.suffix }}"
            fi
          else
            IMAGE=${{ env.DEV_IMAGE }}
            if [[ "$TRAVIS_TAG" == *"dev"*  || "$TRAVIS_TAG" == *"beta"* ]]; then
              PUSH="true"
            else
              PUSH="false"
            fi
            VERSION=${TRAVIS_TAG}
            TAGS=$(echo $TAGS | sed 's!${{ env.DEFAULT_IMAGE}}!${{ env.DEV_IMAGE }}!')
            if [ "${{ matrix.node }}" == "${{ env.LATEST_NODE }}" ] && [ "${{ matrix.suffix}}" == "" ]; then
              TAGS="$TAGS,$IMAGE:$VERSION"
            fi
          fi

          PLATFORMS=""
          SUFFIX=""
          if [[ "${{matrix.suffix}}" == "-raspbian" ]]; then
            PLATFORMS="linux/arm/v7, linux/arm/v6"
            SUFFIX=""
            FFMPEG_OS="raspbian"
          else
            PLATFORMS="linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6"
            SUFFIX="${{ matrix.suffix }}"
            FFMPEG_OS="alpine"
          fi

          echo $TAGS

          echo "::set-output name=tags::$TAGS"
          echo "::set-output name=push::$PUSH"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=platforms::$PLATFORMS"
          echo "::set-output name=suffix::$SUFFIX"
          echo "::set-output name=ffmpegOS::$FFMPEG_OS"
      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v2
        continue-on-error: true
        with:
          context: .
          platforms: ${{ steps.imageSettings.outputs.platforms }}
          push: ${{ steps.imageSettings.outputs.push }}
          file: .docker/Dockerfile.alpine
          build-args: |
            NODE_VERSION=${{ matrix.node }}
            BUILD_DATE=${{ steps.date.outputs.date }}
            BUILD_VERSION=${{ steps.imageSettings.outputs.version }}
            BUILD_REF=${{ env.GITHUB_SHA }}
            NODE_RED_VERSION=${{ steps.nodeRedVersion.outputs.version }}
            HOMEKIT_BRIDGED_VERSION=${{ steps.nrchkbVersion.outputs.version }}
            FFMPEG_OS=${{ steps.imageSettings.outputs.ffmpegOS }}
            TAG_SUFFIX=${{ steps.imageSettings.outputs.suffix }}
          tags: ${{ steps.imageSettings.outputs.tags }}
