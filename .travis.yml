os: linux

dist: xenial

services: docker

language: shell

env:
    global:
        - NODE_RED_BASE_TAG=1.2.2
        - QEMU_VERSION=v4.0.0
        - S6_VERSION=v1.22.1.0
        - DOCKER_FILE=Dockerfile.alpine

    jobs:
        ### Node JS 10 #####################################################################################################
        # Default Images
        - NODE_VERSION=10   TAG_SUFFIX=default  QEMU_ARCH=x86_64    ARCH=amd64      S6_ARCH=amd64       FFMPEG_ARCH=x86_64
        - NODE_VERSION=10   TAG_SUFFIX=default  QEMU_ARCH=arm       ARCH=arm32v6    S6_ARCH=armhf       FFMPEG_ARCH=armv6l
        - NODE_VERSION=10   TAG_SUFFIX=default  QEMU_ARCH=arm       ARCH=arm32v7    S6_ARCH=armhf       FFMPEG_ARCH=armv6l
        - NODE_VERSION=10   TAG_SUFFIX=default  QEMU_ARCH=aarch64   ARCH=arm64v8    S6_ARCH=aarch64     FFMPEG_ARCH=aarch64
        # Minimal Images
        - NODE_VERSION=10   TAG_SUFFIX=minimal  QEMU_ARCH=x86_64    ARCH=amd64      S6_ARCH=amd64       FFMPEG_ARCH=x86_64
        - NODE_VERSION=10   TAG_SUFFIX=minimal  QEMU_ARCH=arm       ARCH=arm32v6    S6_ARCH=armhf       FFMPEG_ARCH=armv6l
        - NODE_VERSION=10   TAG_SUFFIX=minimal  QEMU_ARCH=arm       ARCH=arm32v7    S6_ARCH=armhf       FFMPEG_ARCH=armv6l
        - NODE_VERSION=10   TAG_SUFFIX=minimal  QEMU_ARCH=aarch64   ARCH=arm64v8    S6_ARCH=aarch64     FFMPEG_ARCH=aarch64

        ### Node JS 12 #####################################################################################################
        # Default Images
        - NODE_VERSION=12   TAG_SUFFIX=default  QEMU_ARCH=x86_64    ARCH=amd64      S6_ARCH=amd64       FFMPEG_ARCH=x86_64
        - NODE_VERSION=12   TAG_SUFFIX=default  QEMU_ARCH=arm       ARCH=arm32v6    S6_ARCH=armhf       FFMPEG_ARCH=armv6l
        - NODE_VERSION=12   TAG_SUFFIX=default  QEMU_ARCH=arm       ARCH=arm32v7    S6_ARCH=armhf       FFMPEG_ARCH=armv6l
        - NODE_VERSION=12   TAG_SUFFIX=default  QEMU_ARCH=aarch64   ARCH=arm64v8    S6_ARCH=aarch64     FFMPEG_ARCH=aarch64

        # Minimal Images
        - NODE_VERSION=12   TAG_SUFFIX=minimal  QEMU_ARCH=x86_64    ARCH=amd64      S6_ARCH=amd64       FFMPEG_ARCH=x86_64
        - NODE_VERSION=12   TAG_SUFFIX=minimal  QEMU_ARCH=arm       ARCH=arm32v6    S6_ARCH=armhf       FFMPEG_ARCH=armv6l
        - NODE_VERSION=12   TAG_SUFFIX=minimal  QEMU_ARCH=arm       ARCH=arm32v7    S6_ARCH=armhf       FFMPEG_ARCH=armv6l
        - NODE_VERSION=12   TAG_SUFFIX=minimal  QEMU_ARCH=aarch64   ARCH=arm64v8    S6_ARCH=aarch64     FFMPEG_ARCH=aarch64

before_install:
    - ./.docker/docker.sh prepare

before_script:
    # Set TARGET Docker Repo
    # default TARGET = nrchkb/node-red-homekit-dev
    # if TRAVIS_TAG starts with a `v` and only contains numbers, dots and/or dash then TARGET = nrchkb/node-red-homekit
    - >
        export TARGET=nrchkb/node-red-homekit-dev

        if [[ "${TRAVIS_TAG}" =~ ^v[0-9\.-]*$ ]]; then
          export TARGET=nrchkb/node-red-homekit
        fi

    # Set NODE_RED_VERSION from package.json
    - >
        export NODE_RED_VERSION=$(grep -oE "\"node-red\": \"(\w*.\w*.\w*.\w*.\w*.)" package.json | cut -d\" -f4)

    # Set HOMEKIT_BRIDGED_VERSION from package.json
    - >
        export HOMEKIT_BRIDGED_VERSION=$(grep -oE "\"node-red-contrib-homekit-bridged\": \"(\w*.\w*.\w*.\w*.\w*.)" package.json | cut -d\" -f4)

    # Set BUILD_VERSION
    - >
        if [ ! -z "${TRAVIS_TAG}" ]; then
          export BUILD_VERSION=${TRAVIS_TAG:1};
        fi

script:
    # Build Docker image
    - ./.docker/docker.sh build

    # Test Docker image
    - ./.docker/docker.sh test

    # Push Docker image, only if TRAVIS_TAG is set
    - >
        if [ ! -z "${TRAVIS_TAG}" ]; then
          # Tag Docker image
          ./.docker/docker.sh tag

          # Docker Login
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

          # Push Docker image
          ./.docker/docker.sh push

          # Docker Logout
          docker logout
        fi

jobs:
    include:
        - stage: manifest
            # Only create and push manifest list to Docker Hub, when tag starts with a `v`, eg. v1.0.2
          if: tag =~ ^v
          script:
              # Create and push Docker manifest lists
              # The push order is displayed in reverse order on Docker Hub

              # Docker Login
              - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

              # Create and push manifest list `version` for minimal
              - ./.docker/docker.sh manifest-list-version "12" "minimal"
              - ./.docker/docker.sh manifest-list-version "10" "minimal"
              - ./.docker/docker.sh manifest-list-version "" "minimal"

              # Create and push manifest list `version` for default
              - ./.docker/docker.sh manifest-list-version "12" "default"
              - ./.docker/docker.sh manifest-list-version "10" "default"
              - ./.docker/docker.sh manifest-list-version "" "default"

              # Create and push manifest list 'latest' or 'testing' for minimal
              - ./.docker/docker.sh manifest-list-test-beta-latest "12" "minimal"
              - ./.docker/docker.sh manifest-list-test-beta-latest "10" "minimal"
              - ./.docker/docker.sh manifest-list-test-beta-latest "" "minimal"

              # Create and push manifest list 'latest' or 'testing' for default
              - ./.docker/docker.sh manifest-list-test-beta-latest "12" "default"
              - ./.docker/docker.sh manifest-list-test-beta-latest "10" "default"
              - ./.docker/docker.sh manifest-list-test-beta-latest "" "default"

              # Docker Logout
              - docker logout

# Notify me when things fail
notifications:
    email: true
